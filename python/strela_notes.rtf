{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww12840\viewh16440\viewkind1
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs24 \cf0 {\listtext	\uc0\u8226 	}7/28/18\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Allow y to be a 1D array and automatically convert to a 2D array with 1 column\
{\listtext	\uc0\u8259 	}This might happen anyways with how numpy coerces types\
{\listtext	\uc0\u8259 	}There are many problems that need to be resolved:\
{\listtext	\uc0\u8259 	}Changing all arrays to 2D arrays\
{\listtext	\uc0\u8259 	}Making sure the activation function works correctly\
{\listtext	\uc0\u8259 	}Adding in the 1 offset neuron\
{\listtext	\uc0\u8259 	}Recursive activation now working\
{\listtext	\uc0\u8259 	}Temporarily removing the bias 1 term; will add in later once dimensionality problems are resolved\
{\listtext	\uc0\u8259 	}The standard will be for all arrays to be stored as n x 1 and then if necessary the transposes will be taken to make the dimensionality work out\
{\listtext	\uc0\u8259 	}The dimensions map up but the performance is highly varied and generally atrocious for a linearly separable problem...something isn't right\
{\listtext	\uc0\u8259 	}Maybe we need the bias 1 term for it to work?\
{\listtext	\uc0\u8259 	}Added the bias term but still not working - classification error is 50%\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}7/29/18\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Going to first look at the test part and see if anything looks unusual\
{\listtext	\uc0\u8259 	}All of the predictions come out to zero! All the neurons are dead!\
{\listtext	\uc0\u8259 	}The dimensions of the weights may be off\
{\listtext	\uc0\u8259 	}Modified the weight vector dimensions so it follows the slides; may not have actually made a difference though.....\
{\listtext	\uc0\u8259 	}Changed the predict method so that the predictions are stored in a fixd numpy array and not a list that gets converted\
{\listtext	\uc0\u8259 	}For whatever reason it's biased towards generating -1 predictions - the error isn't shrinking!\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}8/11/18\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Looked at the code briefly - attempted to multiply the weights by the predicted value to change direction of training but this had no effect\
{\listtext	\uc0\u8259 	}The error is growing for some test points which is not good....\
{\listtext	\uc0\u8259 	}Should add to github and also check what cases do need to be multiplied by the actual value\
{\listtext	\uc0\u8259 	}Should look at another description of backpropagation and see if it's consistent\
{\listtext	\uc0\u8259 	}Should also definitely push this to a lower dimension space where it's more visible what's going on\
}